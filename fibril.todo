 ✔ Guard becomes event driven - no polling @done (16-02-18 09:28)
 ✔ Fibrils return single count guards @done (16-02-18 09:28)
 ✔ Can await one or more guards @done (16-02-18 09:28)
 ✔ Use semaphore type object for synchronising multiple async calls @done (16-02-18 19:03)
 ✔ Use counter to determine if any work left to do, if not auto-stop @done (16-02-18 19:03)
 ✔ Create event loop import @done (16-02-18 21:15)
 ✔ Create continous and counting loop construct @done (16-02-18 21:15)
 ✔ Create async object @done (16-02-19 07:35)
 ✔ Create futures @done (16-02-19 07:49)
 ✔ Turn into gem @done (16-02-19 07:49)
 ✔ Create Fibril proxy @done (16-02-19 19:18)
 ✔ Provide optional timeout value to Fibril looping @done (16-02-23 08:58)
 ✔ Create smarter loop importer. Finds import statement and only evals everything past itself @done (16-02-23 09:01)
 ✔ Add fasync and ffuture @done (16-02-27 11:19)
 ✘ Add keywords syntax highlighting in Sublime @cancelled (16-03-01 18:34)
    ✘ future, async, fibril, await, await_all @cancelled (16-03-01 18:34)


 ✘ Use efficient ring buffer as queue and block when full @cancelled (16-03-01 09:05)
 ✔ Split imports into core, and full functionality to prevent conflicts @done (16-03-01 18:41)
 ☐ Enumerable ticking with fibril
 ☐ Enumerable concurrency, every nth
 ☐ Add meaningful errors when common mistakes are made

 ☐ Examples:

   ☐ Fibril with tick
   ☐ Fibril with async IO
   ☐ Fibril external await
   ☐ Fibril with internal await
   ☐ Fibril wrapping redis
   ☐ Futures

   ☐ Disk read + write
   ☐ Database queries using AR
   ☐ Network IO
   ☐ Asyncifying common functions
   ☐ Asyncifying class methods
   ☐ Asyncifying instance methods
   ☐ Asyncifying module methods
   ☐ Comparison to thread
   ☐ Comparison to event machine
 ☐ Write performance tests
 ☐ Write tests
